name: Build and Release Mod

on:
  push:
    tags:
      - 'v*-mc*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Make Gradle Executable
        run: chmod +x ./gradlew

      - name: Build Mod
        run: ./gradlew build

      - name: Find JARs to Upload
        id: find_jar
        run: |
          find . -type f -path "*/build/libs/*" -name "*.jar" \
            -not -name "*sources*" \
            -not -name "*dev*" \
            -not -name "*javadoc*" \
            \( -name "*-fabric.jar" -o -name "*-forge.jar" \) > jars.txt

          echo "Found jars:"
          cat jars.txt

          jars_output=$(paste -sd'\n' jars.txt)
          echo "jar_files<<EOF" >> $GITHUB_OUTPUT
          echo "$jars_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Detect Release Type
        id: detect_release_type
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          echo "Tag name: $TAG_NAME"

          if [[ "$TAG_NAME" == *alpha* ]]; then
            echo "github_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=alpha" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == *beta* ]]; then
            echo "github_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=beta" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == *release* ]]; then
            echo "github_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=release" >> $GITHUB_OUTPUT
          else
            echo "github_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=release" >> $GITHUB_OUTPUT
          fi

      - name: Publish to GitHub, CurseForge and Modrinth with mc-publish
        uses: Kir-Antipov/mc-publish@v3.3.0
        with:
          files: ${{ steps.find_jar.outputs.jar_files }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-prerelease: ${{ steps.detect_release_type.outputs.github_prerelease }}

          curseforge-id: '1307459'
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}
          curseforge-version-type: ${{ steps.detect_release_type.outputs.release_type }}

          modrinth-id: 'FntvSnUz'
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          modrinth-version-type: ${{ steps.detect_release_type.outputs.release_type }}